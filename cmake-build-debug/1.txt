S : A B C D E;
A : a | ε;
B : b | ε;
C : c;
D : d | ε;
E : e | ε;

================

S : B b | C d;
B : a B | ε;
C : c C | ε; 

=================

S : A C B | C b B | B a;
A : d a | B C;
B : g | ε;
C : h | ε;

=================

E : T E';
E' : + T E' | ε;
T : F T';
T' : * F T' | ε;
F : ( E ) | id;

============

E : E + T | T;
T : T * F | F;
F : ( E ) | id;

===================
start S

S : E@
E : T + E | T – E | T@
T : F * T | F / T | F@
F : num | id@
=============


start S
S : S1 | S S1@
S1 : S_FOR | stmt@
S_FOR : for ( define ; conds ; assign ) block@
block : { stmtlst }@
stmtlst : stmtlst stmt | stmt@
stmt : define | assign@
define : var assign@
conds : id compare val@
compare : < | <= | > | >= | == | !=@
assign : id = val | id ++ | id --@
val : val + val1 | val - val1 | val1@
val1 : val1 * val2 | val1 / val2 | val2@
val2 : ( val ) | id | num | true | false@


=====================================================

start S   
S : S1 S | S1;
S1 : S_W | S_DW | statement;
S_DW : DO block WHILE ( condition );
S_W : WHILE ( condition ) block;
block : { statement_list };
statement_list : statement statement_list | ε;
statement : declaration | assignment | ex;
declaration : VAR assignment;
assignment : ID = ex;
ex : ex + ex | ex - ex | ex * ex | ex / ex | ID | NUMBER;
condition : condition OR condition | condition AND condition | single_condition;
single_condition : ex CONDITION ex | ID | NUMBER;

=================================
E : T X
